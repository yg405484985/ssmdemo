<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
              http://www.springframework.org/schema/beans/spring-beans.xsd  
              http://www.springframework.org/schema/mvc  
              http://www.springframework.org/schema/mvc/spring-mvc.xsd  
              http://www.springframework.org/schema/context  
              http://www.springframework.org/schema/context/spring-context.xsd
              http://www.springframework.org/schema/aop
   			 http://www.springframework.org/schema/aop/spring-aop.xsd
   			 http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 开启注解扫描 -->
	<context:component-scan base-package="com.hzit.service,com.hzit.dao"></context:component-scan>

	<!-- 加载数据源 -->
	<!-- 引入jdbc.properties -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>

	<!-- 配置数据库连接池 c3p0 -->
	<bean id="dataSource" name="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 指定连接数据库的驱动 -->
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<!-- 指定连接数据库的URL -->
		<property name="jdbcUrl" value="${jdbc.url}" />
		<!-- 指定连接数据库的用户名 -->
		<property name="user" value="${jdbc.username}" />
		<!-- 指定连接数据库的密码 -->
		<property name="password" value="${jdbc.password}" />
		<!-- 指定连接池中保留的最大连接数. Default:15 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<!-- 指定连接池中保留的最小连接数 -->
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!-- 指定连接池的初始化连接数 取值应在minPoolSize 与 maxPoolSize 之间.Default:3 -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0 -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3 -->
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。 但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0 -->
		<property name="maxStatements" value="${jdbc.maxStatements}" />
		<!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
	</bean>


	<!-- SqlSessionFatory -->
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 加载mybatis的全局配置文件 -->
		<!-- <property name="configLocation" value="classpath:SqlMapConfig.xml" 
			/> -->
		<!-- 配置实体类的别名 -->
		<property name="typeAliasesPackage" value="com.hzit.bean" />

		<!-- 加载分页插件 -->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<property name="properties">
						<!--使用下面的方式配置参数，一行配置一个 -->
						<value>
							helperDialect=mysql
						</value>
					</property>
				</bean>
			</array>
		</property>

		<!-- 如果想自定义mapper和dao接口的位置，可以在此配置 value:指定的位置 -->
		<!-- <property name="mapperLocations" value="classpath:com/ssm/mapping/*.xml"></property> -->
	</bean>

	<!-- spring-mybaits扫描 dao接口和mapper文件，路径一致，名称一致 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.hzit.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>


	<!-- 事物管理 声明式事物+注解的方式 -->
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 基于注解的申明式事物管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>